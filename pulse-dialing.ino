/* Arduino Uno Sketch to *simulate* a telephone exchange (Vermittlungsstelle) for a *single telephone* using
 *  Pulse Dialing (US)/Loop-Disconnect Signalling (UK)/Decadic Signalling (AU)/Impuls Wahlverfahren (DE)
 *  (e.g., a rotary dial telephone)
 * 
 * Author: Chris Petrich, 2019-2021
 * Date: 3 Apr 2021
 * License: MIT
 * Source: https://github.com/cpetrich/
 * 
 * Scope: This project is intended to breath just enough life into an old rotary dial
 *        telephone to
 *        (a) make the phone ring, and
 *        (b) make it interesting for children to explore.
 *        
 *        As written it uses the German standard for state machine, dial tones and signals, timing, 
 *        and frequency of the bell (yes, phones used to ring differently in different countries).
 *        
 * Limitations: * This program does not manage connections between multiple phones.
 *              * Hook Flash is not implemented
 *              * Sound quality is poor due to hardware limitation of the Arduino Uno.
 *              * TODO: check if OCR1A needs to be adjusted for SAMPLE8 (i.e. SAMPLE64 not defined)
 * 
 * Hardware: Intended to be used with Arduino Uno and Silvertel Ag1170-5 Low Power Ringing SLIC
 *           - wire up Ag1170 as per datasheet
 *           - connect pin_FR to F/R, 
 *                     pin_RM to RM, and 
 *                     pin_SHK to SHK
 *           - connect audio out from Arduino Uno as follows
 *             (turns square wave into something more sine-like and sets volume):
 *
 *   ARDUINO                                ||          ||         Ag1170
 *   pin_AudioOut -----[100 kOhm]-----o-----||----------||-------- Vin
 *                                    |     ||          ||
 *                            100 nF ---      10 nF      100 nF
 *                                   ---
 *                                    |
 *                                   === GND
 * 
 * Revisions:
 * 
 * 2021/04/03: small adjustments (mostly comments) for GitHub publication
 * 2019/09/07: code completed
 * 
 */
 
#define SAMPLE64
// "kein Anschluss unter dieser Nummer"
// DAC delta signal run length-encoded
#ifdef SAMPLE64
// 64 kHz samples
const PROGMEM uint8_t sound_rl[] = {24,16,17,20,18,17,19,20,24,36,22,27,14,15,13,17,20,20,18,16,15,18,20,19,20,5,15,20,17,11,14,20,19,20,6,13,22,21,17,18,16,17,18,18,17,16,18,18,13,14,18,26,20,17,19,19,13,12,22,16,20,19,26,21,21,9,13,22,14,20,16,14,20,21,21,22,13,20,17,8,16,19,17,14,14,18,20,16,18,19,20,18,12,20,17,17,9,14,22,18,16,17,18,17,15,18,21,30,25,34,25,26,13,11,20,21,22,17,15,18,21,31,19,18,18,21,25,37,23,24,18,14,17,19,18,21,20,22,19,12,18,22,24,21,19,20,21,19,18,18,19,25,40,20,16,14,17,22,17,12,17,19,18,18,22,39,23,39,24,22,17,16,18,18,16,17,21,19,16,14,18,20,22,11,10,21,41,25,19,13,16,20,20,16,17,17,20,19,18,17,29,21,14,12,18,27,22,16,8,17,23,25,17,15,18,13,13,21,25,46,23,35,33,18,4,21,24,37,29,40,31,23,15,16,26,31,24,33,36,26,43,24,17,15,21,27,24,30,37,29,25,46,22,20,20,19,21,27,25,4,16,26,25,25,9,13,23,23,11,16,25,25,25,8,15,26,24,24,7,14,27,42,27,25,29,12,4,28,26,37,29,45,26,1,1,26,30,41,27,37,30,48,25,27,28,42,27,43,26,24,18,15,23,24,24,13,6,27,25,25,11,9,23,22,17,17,23,25,25,13,4,27,27,38,29,23,18,18,22,24,37,31,34,32,28,28,2,26,23,26,39,28,36,29,28,17,7,31,24,25,42,26,40,26,29,11,8,31,25,27,40,27,40,26,27,10,15,26,24,26,7,10,26,29,38,34,38,30,24,44,24,36,33,38,33,29,23,43,26,36,36,32,37,23,22,43,27,35,41,25,41,21,20,43,28,32,17,3,25,43,20,20,18,10,13,22,38,39,28,40,20,18,18,9,13,23,12,5,22,41,42,25,17,18,18,10,10,22,14,8,18,16,10,17,16,11,19,22,13,20,37,25,8,8,20,16,8,19,19,14,12,17,19,19,38,39,22,39,39,22,13,21,15,10,17,20,4,17,15,12,9,20,39,20,15,23,16,5,15,23,7,12,17,12,9,23,39,16,10,28,18,3,16,27,7,9,17,11,7,30,33,9,12,34,36,41,17,8,11,24,13,9,16,7,15,30,37,41,16,9,11,29,6,12,16,7,17,23,37,41,17,9,10,22,19,10,7,15,20,19,10,10,20,37,34,30,31,12,11,26,36,28,31,35,24,29,20,22,32,29,30,31,38,19,17,21,34,26,33,38,39,17,17,20,32,24,35,37,24,4,14,14,16,35,22,29,29,43,16,10,13,13,16,22,10,3,19,20,36,22,36,16,18,3,15,27,29,23,30,25,32,19,32,30,28,25,35,25,32,17,20,11,4,25,31,25,31,22,20,3,11,14,30,33,28,24,33,26,27,24,30,27,30,24,33,26,26,20,38,24,33,25,27,30,32,19,33,24,32,26,29,33,26,21,19,11,11,21,22,6,5,24,23,24,32,29,22,14,9,20,18,9,11,19,26,22,16,6,18,27,22,8,9,21,17,12,18,17,19,24,16,14,15,16,24,18,9,19,17,16,15,17,25,21,18,15,14,16,26,18,10,18,18,16,18,18,22,19,16,17,19,16,17,21,17,18,17,13,22,21,19,19,18,17,19,17,19,15,19,28,21,16,14,21,20,20,18,19,20,15,15,21,17,24,22,12,15,23,20,11,17,22,30,21,17,20,19,16,19,18,18,22,18,10,18,19,19,17,18,20,16,16,26,12,8,22,20,17,18,19,17,17,21,19,15,18,20,17,14,20,23,18,12,19,21,14,15,21,19,10,16,20,20,21,19,21,15,15,23,23,45,45,25,16,17,19,21,21,18,20,24,20,19,18,16,19,20,20,18,16,20,20,16,19,22,22,19,19,20,20,15,18,22,21,13,20,23,43,28,20,15,18,20,20,18,18,20,21,20,20,17,17,20,21,19,18,19,21,21,16,18,20,22,15,19,23,24,14,12,24,23,13,9,24,24,17,9,21,22,16,11,24,24,20,14,19,20,41,24,17,12,22,26,41,28,23,9,17,25,25,37,21,22,22,21,13,17,25,23,18,11,22,26,24,18,15,26,23,22,21,21,16,19,22,21,19,16,21,23,20,16,20,23,22,20,21,21,18,19,20,22,19,17,20,24,22,16,17,22,22,21,21,20,18,19,21,22,19,17,20,24,23,15,15,23,22,22,21,21,17,20,21,21,19,16,21,23,22,16,17,22,23,22,20,20,18,20,21,22,18,16,22,23,21,17,18,21,23,21,22,20,16,20,22,21,18,15,22,23,21,16,17,23,23,22,21,19,16,20,22,22,16,16,22,23,21,16,18,23,22,22,21,20,15,20,22,21,17,15,22,24,20,15,20,23,22,22,21,20,15,20,22,21,16,15,22,24,19,14,22,24,21,22,20,19,16,20,22,21,16,16,21,23,16,16,23,25,21,21,22,17,15,21,22,21,15,17,22,21,12,20,24,25,21,20,21,18,15,21,23,20,15,17,21,19,14,21,25,20,20,21,22,19,14,20,23,21,15,18,21,19,14,22,23,16,20,22,24,50,26,21,18,18,20,18,16,23,21,14,18,21,23,19,18,20,19,19,20,21,19,16,20,22,22,16,14,21,20,22,17,15,19,21,22,17,9,14,28,8,7,25,23,19,17,16,20,21,20,21,17,19,21,19,21,14,17,22,18,23,15,12,47,27,19,24,20,13,23,17,15,10,18,25,23,17,15,18,20,24,17,15,17,13,7,4,32,26,19,20,17,13,32,16,15,20,17,27,19,11,20,16,16,17,14,20,22,18,51,20,17,14,16,3,7,16,22,17,13,16,15,22,52,18,23,24,12,17,19,17,22,16,13,17,16,22,50,15,26,23,13,17,20,16,26,18,7,17,16,24,55,9,25,21,12,19,19,15,25,18,14,17,15,26,30,2,17,12,24,24,11,19,16,16,27,15,11,18,17,24,48,12,26,24,7,26,20,8,28,7,19,19,15,24,28,6,8,14,31,25,9,23,10,17,28,13,15,18,16,24,46,14,25,56,9,19,43,20,23,32,36,18,34,74,55,23,15,41,37,16,31,62,52,15,25,45,36,17,31,31,13,33,64,64,15,2,59,41,19,26,31,28,27,33,41,19,31,42,36,11,28,14,15,31,10,22,28,13,18,21,16,31,20,17,9,14,31,37,8,6,16,21,11,9,27,18,20,19,17,15,22,10,27,20,23,15,13,4,12,13,13,5,9,23,13,12,11,12,3,13,13,25,15,25,12,23,11,3,8,10,13,12,7,10,11,10,8,12,12,11,6,11,13,9,14,14,5,10,12,7,8,11,12,13,4,12,12,11,13,10,5,14,13,7,6,13,12,26,20,15,10,5,10,11,11,9,7,11,12,12,10,7,12,12,10,9,10,10,10,8,8,9,11,10,10,8,8,10,9,9,10,11,9,9,10,10,9,9,11,10,9,9,11,10,9,10,10,11,12,6,9,12,9,6,11,14,23,12,7,10,12,10,10,10,10,9,10,10,11,9,9,10,11,11,7,11,13,23,12,11,8,9,12,23,39,26,13,10,9,11,10,10,11,9,9,11,11,10,10,10,11,10,10,11,9,9,12,12,11,13,10,11,11,11,9,10,11,11,7,8,11,10,9,12,11,11,9,11,9,11,13,25,13,3,10,13,12,10,8,11,10,9,10,10,11,11,10,9,10,21,12,10,9,8,10,10,9,10,10,11,14,11,12,12,8,9,12,8,9,9,11,12,10,5,15,26,22,26,22,14,11,8,10,13,15,12,7,12,15,11,11,12,13,7,7,13,12,3,11,12,11,7,11,13,13,10,15,13,10,10,11,11,10,9,11,11,9,7,11,13,9,5,22,16,25,12,10,10,10,12,10,8,11,11,9,10,13,23,12,9,8,11,10,10,9,7,9,11,9,8,11,11,11,7,10,11,9,9,12,11,8,10,12,11,8,9,12,11,8,10,11,11,10,9,13,15,10,8,12,13,7,7,13,12,10,9,11,11,11,10,9,12,13,12,6,12,12,10,11,10,10,10,10,11,11,8,11,13,27,13,12,9,10,11,10,11,9,10,11,11,7,11,15,14,3,10,13,12,8,10,11,11,12,11,12,11,10,10,11,10,9,10,11,11,10,10,11,10,12,13,8,9,13,13,11,3,16,15,6,7,12,11,8,11,12,10,8,13,18,28,14,7,8,12,8,10,12,9,5,13,16,23,17,23,17,9,1,16,12,7,10,16,27,15,27,17,20,13,8,8,15,15,31,15,11,11,11,10,11,13,4,9,15,24,16,27,18,22,21,18,26,14,9,7,12,12,13,27,14,21,16,14,4,11,13,28,23,16,8,9,14,25,13,23,15,12,10,11,12,7,7,12,13,19,20,14,10,11,12,13,23,14,19,19,20,21,15,20,27,18,19,24,11,7,14,15,31,17,20,18,22,15,16,22,14,15,29,14,14,24,18,20,19,24,19,18,21,21,14,13,13,12,10,10,15,14,16,19,22,18,15,24,15,14,19,20,19,16,15,12,6,13,17,18,26,16,14,18,23,18,16,21,23,17,15,26,16,17,12,8,10,13,18,20,23,22,29,16,15,7,8,12,13,25,18,16,31,13,10,28,16,10,12,19,26,21,16,22,7,12,18,13,29,21,12,27,12,11,18,12,26,20,17,22,22,17,32,66,14,12,56,21,7,30,21,14,32,32,17,17,15,14,31,13,12,58,21,17,30,25,21,18,18,13,27,16,13,38,12,5,25,18,26,24,22,19,19,17,24,16,9,38,46,15,25,24,21,20,21,16,23,14,10,46,43,17,22,25,21,20,24,15,21,41,4,24,43,16,24,25,22,20,24,13,23,39,12,27,31,17,23,25,22,20,19,19,26,51,15,15,30,17,23,27,24,21,26,21,16,28,20,17,42,22,19,26,25,19,27,22,17,24,24,19,26,28,21,27,26,17,27,24,17,22,27,16,26,28,22,25,26,17,25,24,19,23,29,14,26,29,21,26,26,18,24,25,21,22,29,11,26,28,22,26,26,19,23,27,20,23,64,29,23,26,26,21,21,28,20,23,29,15,22,26,23,26,27,21,22,28,20,22,30,16,19,27,24,25,27,22,21,28,22,21,31,19,14,27,22,26,27,23,21,30,22,20,34,18,6,29,20,27,30,21,19,37,25,10,44,42,20,27,31,20,20,36,11,16,61,35,20,26,30,19,23,34,10,20,59,34,18,28,30,18,22,66,64,26,15,30,32,14,26,63,62,25,18,29,29,20,29,75,52,22,11,34,31,17,39,41,11,18,55,60,34,6,40,66,77,45,23,14,34,22,15,34,77,64,71,64,45,6,33,67,69,30,6,31,25,18,29,65,8,17,39,15,23,31,16,23,23,17,29,30,11,15,23,11,45,30,8,25,26,21,25,20,10,19,19,22,14,13,27,27,7,14,18,25,43,22,21,24,18,11,28,9,24,19,19,20,20,18,25,22,18,26,15,11,57,25,14,25,23,17,21,29,8,18,1,29,26,15,24,13,10,20,20,25,41,24,3,22,13,12,14,19,26,23,13,16,23,16,21,16,22,18,17,16,17,14,8,20,24,30,22,26,17,16,27,17,8,2,28,21,22,16,27,13,13,27,13,5,13,22,20,13,4,16,9,10,19,18,17,17,18,12,22,18,37,32,20,18,5,10,9,8,15,25,16,17,16,21,15,15,16,12,8,13,7,5,16,23,26,28,10,12,18,22,26,16,12,15,24,20,18,13,9,15,25,27,21,17,16,24,22,19,21,16,23,16,19,22,21,20,23,24,21,21,17,22,22,19,22,13,10,25,11,8,4,14,15,28,18,18,26,20,33,14,8,11,16,17,16,16,21,14,25,15,16,16,15,23,16,29,25,9,9,18,20,46,23,16,23,18,24,23,29,15,25,24,20,29,20,18,24,26,16,18,18,28,21,23,24,21,25,29,46,26,28,23,27,22,27,19,21,19,29,11,3,18,22,25,26,24,22,26,23,16,24,8,8,16,14,28,26,25,24,25,24,25,25,25,26,26,26,27,27,23,28,27,23,26,27,22,25,30,24,21,40,29,16,30,26,18,26,27,11,26,26,15,30,23,19,26,28,24,28,27,27,29,28,28,26,28,29,33,34,29,28,28,41,32,25,17,22,20,36,37,37,43,35,30,25,20,25,26,32,35,17,22,31,35,34,29,17,17,31,33,46,30,32,32,27,31,33,32,31,33,36,31,25,31,37,24,26,31,28,31,34,34,29,30,36,37,28,28,37,25,20,31,34,34,30,32,35,37,29,39,30,31,32,35,33,31,36,36,32,32,37,31,32,34,33,34,34,32,33,31,39,32,33,35,31,31,33,31,31,31,52,31,31,34,31,29,32,30,32,34,30,9,24,29,30,33,29,28,30,24,36,39,26,13,25,28,30,31,26,24,28,25,26,26,12,34,52,28,29,31,27,23,25,28,26,20,16,25,30,12,26,26,29,28,25,24,23,23,25,12,22,34,27,25,26,25,25,26,25,21,22,31,59,32,11,24,42,24,27,31,11,14,28,30,60,24,20,33,36,23,33,52,20,42,50,25,26,46,27,25,31,31,17,29,10,35,38,26,29,33,35,27,33,28,20,28,10,34,37,23,28,34,37,28,35,27,25,67,72,65,26,22,32,29,26,54,79,69,25,24,31,31,30,43,19,13,55,63,26,24,31,20,32,51,5,24,41,33,2,43,29,19,23,24,33,34,28,27,38,29,10,45,28,16,20,26,36,36,23,23,41,44,17,34,43,19,28,11,25,35,21,26,51,55,4,32,30,26,25,5,9,17,10,2,13,14,15,37,25,16,13,21,27,26,16,10,13,18,17,26,32,38,25,19,34,25,29,26,47,18,27,30,16,11,9,15,36,22,20,45,16,4,14,15,17,18,20,11,13,27,7,11,17,20,25,25,39,19,16,14,22,8,8,26,19,18,21,17,3,23,19,23,14,15,19,18,19,19,16,16,18,14,14,19,18,19,14,16,18,15,12,19,22,18,20,14,16,17,17,23,14,19,15,17,20,13,15,19,14,23,12,13,22,15,19,19,19,16,15,16,20,17,17,15,18,18,15,16,16,22,19,16,14,16,22,18,16,17,18,20,18,17,18,18,20,16,18,17,18,18,16,8,35,22,21,4,14,20,21,9,18,19,19,20,12,19,16,13,24,6,14,23,29,27,50,20,15,26,20,12,21,14,21,27,8,16,21,22,25,6,21,27,2,20,10,25,59,5,8,55,26,38,36,41,16,21,18,11,26,16,8,27,14,19,39,28,46,24,19,22,12,14,25,6,19,23,16,18,15,9,23,23,19,10,21,21,19,20,14,17,21,14,16,23,18,21,41,25,20,7,22,22,17,18,15,18,22,15,17,22,17,20,42,25,20,9,22,21,18,18,17,17,23,15,13,22,20,20,40,24,21,10,20,22,18,18,18,17,23,16,13,22,21,24,32,23,19,13,21,21,17,18,18,18,21,17,15,21,19,16,15,10,21,24,19,11,22,21,18,19,17,16,21,17,15,20,19,16,17,14,18,22,19,15,19,21,17,18,18,16,20,17,16,20,18,17,16,16,19,20,19,16,19,20,17,18,17,18,20,17,15,20,18,16,20,16,19,20,19,15,20,19,17,18,17,18,21,16,15,20,19,16,19,18,20,20,18,15,21,19,17,18,16,18,23,15,14,21,17,16,21,21,20,21,18,13,21,20,18,17,15,18,25,12,13,22,17,17,17,21,23,23,16,14,22,18,18,19,8,23,28,5,20,23,10,21,23,11,9,1,22,20,17,16,22,17,17,15,9,24,22,11,19,20,12,24,23,5,36,20,17,16,20,18,16,15,13,19,24,9,24,17,11,33,35,10,18,19,16,16,20,16,16,14,13,19,19,14,21,15,17,47,19,15,18,18,16,17,18,17,15,16,14,16,18,16,16,5,32,44,18,20,19,16,18,16,19,17,15,16,16,17,18,18,58,47,12,15,19,18,22,15,16,33,20,13,18,15,16,20,11,13,20,17,14,20,7,10,16,19,17,15,13,14,17,16,13,14,20,20,10,18,48,15,9,42,17,15,18,15,13,15,20,18,16,2,23,19,8,20,46,15,15,18,12,7,17,18,15,19,12,15,24,11,20,4,15,30,20,16,20,24,13,17,15,9,17,3,18,28,11,20,20,12,20,5,18,18,16,23,25,16,16,7,9,39,34,6,29,29,16,13,30,23,13,23,20,19,17,9,13,28,18,12,25,13,19,42,38,25,15,20,15,16,16,17,17,19,18,20,18,12,26,16,15,11,8,13,24,21,17,14,18,17,15,14,16,18,24,15,11,9,7,10,19,18,43,32,22,31,18,43,11,13,19,19,27,13,14,19,9,5,18,19,19,15,18,29,19,4,10,28,22,15,8,17,20,10,12,23,51,22,11,20,18,14,13,12,21,20,41,16,11,20,16,21,17,15,18,25,18,15,7,17,43,24,31,19,20,14,18,22,28,43,23,36,35,16,9,9,25,31,23,13,11,10,10,10,19,18,15,14,28,13,25,15,10,21,15,27,27,19,10,14,14,10,10,14,23,14,29,16,17,16,26,19,15,13,17,5,7,23,19,7,12,12,14,23,29,19,14,6,14,27,6,8,18,11,9,19,13,11,14,15,9,9,15,10,8,13,21,14,11,12,10,12,22,10,14,11,12,11,12,13,8,13,11,21,15,8,15,7,21,15,11,13,12,12,13,12,16,13,13,9,13,14,9,12,9,24,11,10,14,9,17,16,9,14,13,15,9,13,13,10,19,13,10,10,14,12,11,13,9,20,12,11,14,9,15,16,10,14,15,14,10,12,13,10,19,13,12,9,13,11,11,26,5,14,11,10,45,13,9,12,14,15,10,12,11,10,23,11,11,10,12,10,11,29,5,13,11,10,30,3,12,13,8,12,14,15,9,12,13,7,11,11,1,14,10,9,13,10,9,13,5,11,7,13,6,13,46,13,4,15,16,13,10,13,11,7,14,5,6,12,9,11,13,9,11,15,2,12,4,33,49,29,14,15,8,13,13,7,15,19,11,10,13,10,12,62,13,7,32,29,12,14,9,13,12,9,14,18,12,10,13,11,12,12,3,39,20,6,34,26,15,15,7,13,13,8,13,19,14,8,13,11,11,13,8,17,5,15,57,24,14,16,8,13,13,7,16,19,11,7,15,9,11,16,8,13,10,13,12,9,34,25,13,14,10,13,12,9,15,17,13,4,18,11,12,13,9,14,9,13,13,7,34,24,12,15,10,13,12,9,14,15,18,5,15,11,13,52,14,4,37,21,17,16,9,13,13,11,12,14,20,9,18,13,9,18,9,17,14,9,41,12,15,18,9,13,16,13,13,13,17,9,16,16,6,23,4,17,16,7,26,2,16,13,14,19,7,16,17,13,12,13,16,10,15,64,62,19,14,24,5,15,20,3,19,12,19,8,14,22,7,22,10,13,20,5,18,15,16,45,51,9,30,31,7,44,57,65,7,8,52,10,7,3,16,11,7,52,4,16,29,9,9,30,14,28,7,9,29,16,23,6,16,10,14,28,5,15,22,10,18,23,19,46,26,16,47,17,15,20,3,19,22,10,15,3,35,26,22,9,16,16,25,15,24,67,25,14,22,37,10,8,10,2,14,13,24,27,17,28,17,25,27,12,15,21,12,26,15,18,10,8,30,24,15,11,9,24,27,15,22,17,17,27,14,19,14,13,20,17,17,21,13,23,15,12,22,16,23,15,13,16,21,31,22,29,26,19,42,26,30,14,4,12,10,11,15,22,5,12,14,10,11,22,23,19,21,8,8,26,28,19,42,19,23,30,13,11,24,19,20,4,16,26,11,7,15,26,27,14,10,12,19,12,13,16,27,15,21,16,18,18,15,19,17,19,15,9,14,37,20,17,14,15,17,19,19,21,7,19,25,21,20,15,14,18,17,16,11,8,16,14,13,22,19,10,22,16,22,17,21,14,16,21,22,17,18,15,14,21,12,11,26,19,19,25,15,27,4,12,16,8,6,16,21,15,18,16,10,10,24,14,9,21,29,16,22,22,40,21,18,21,14,15,25,15,22,12,10,16,22,21,15,16,20,10,19,22,19,16,20,16,15,21,18,20,14,20,25,12,19,24,18,17,20,15,21,20,13,22,17,19,23,16,21,25,19,15,20,15,21,22,13,21,19,16,23,18,21,27,20,12,24,13,19,26,10,21,21,12,25,23,20,26,22,7,27,18,13,27,13,17,23,10,24,26,20,23,21,11,24,21,13,25,17,14,22,14,22,27,22,23,23,11,21,23,14,21,19,15,21,16,19,27,24,23,22,12,21,21,15,21,21,16,19,17,20,31,26,23,20,14,19,21,17,20,18,17,19,18,18,25,33,23,20,12,21,21,15,19,21,18,19,17,18,23,9,13,20,23,19,14,19,22,17,18,19,18,20,17,19,22,40,23,22,10,19,23,18,17,19,18,20,17,19,25,9,2,27,23,22,10,20,22,20,16,20,19,20,16,19,25,37,24,50,26,22,13,18,21,20,15,20,26,34,26,49,27,25,10,18,21,22,16,17,26,32,26,51,25,25,14,17,21,22,16,17,24,32,27,51,25,24,15,17,20,23,17,17,23,31,29,50,28,24,15,17,21,24,23,8,23,32,28,29,9,13,30,24,16,15,20,26,46,37,29,27,11,12,30,23,21,14,18,27,38,40,28,27,11,10,32,24,23,9,15,32,33,46,29,28,53,24,23,59,27,21,7,21,26,27,23,2,30,24,22,24,12,25,27,19,8,21,25,27,21,6,28,23,23,19,13,26,25,17,16,19,25,26,20,12,26,24,23,19,12,26,25,17,16,21,24,26,21,8,28,25,24,9,12,35,40,5,10,24,26,27,56,25,23,21,14,25,26,15,15,19,25,27,23,11,25,23,22,29,16,20,27,30,38,28,24,18,24,20,20,22,19,25,22,16,50,26,17,17,15,24,28,22,25,28,10,14,28,20,22,17,19,29,9,16,32,21,25,49,32,27,27,6,13,30,17,19,26,20,23,57,30,25,32,40,22,20,22,19,25,18,8,30,22,20,4,14,28,37,7,9,14,23,25,15,24,16,13,27,20,16,16,13,25,30,15,14,8,24,26,17,24,12,9,27,17,17,22,18,22,58,10,22,24,19,23,51,20,12,25,17,21,33,3,20,13,22,26,16,21,52,20,18,24,17,18,33,9,13,14,24,28,17,19,17,8,30,22,14,22,17,19,32,10,12,16,22,29,17,20,56,24,9,25,17,19,7,3,22,37,23,26,21,21,16,4,37,18,13,24,18,30,21,12,16,11,25,24,22,21,55,17,13,25,19,22,26,12,13,21,21,27,20,22,57,18,15,23,18,20,27,17,22,12,19,27,18,24,59,54,17,29,21,24,19,14,22,22,19,29,29,23,9,12,11,17,19,25,23,23,21,27,15,9,25,23,42,31,16,24,23,23,26,25,22,25,28,19,33,18,11,2,12,50,24,25,27,29,24,22,25,24,30,29,18,40,23,26,27,31,26,25,23,25,29,29,26,29,23,28,28,31,28,27,27,25,27,31,28,24,23,27,30,31,29,29,28,26,25,33,24,18,22,29,29,33,30,30,35,52,22,37,25,30,32,34,31,33,42,39,26,33,27,30,35,34,32,34,39,35,31,32,30,31,35,35,36,37,35,35,32,29,29,30,36,37,43,36,34,47,25,19,23,31,40,49,45,30,42,43,20,11,25,35,42,57,37,28,43,47,12,12,27,34,42,57,37,27,44,48,25,2,26,31,31,35,26,27,23,29,32,46,4,17,9,12,19,30,27,36,25,31,24,29,51,36,7,13,10,11,18,31,23,32,33,32,20,28,34,14,14,8,9,34,15,10,18,30,26,33,31,34,17,26,26,19,20,36,6,15,8,15,18,30,26,38,30,32,23,19,26,10,28,53,12,12,19,28,27,35,32,33,26,25,60,30,30,20,20,27,27,34,31,31,26,26,53,34,34,19,20,27,26,33,33,32,27,26,47,36,17,15,1,22,21,27,27,31,33,33,26,26,46,35,19,21,8,16,22,27,25,31,33,32,25,26,48,37,20,21,7,16,22,28,25,30,30,34,27,26,42,42,20,23,12,11,22,27,25,31,31,32,28,29,39,42,23,26,13,5,24,29,24,31,30,34,28,29,41,36,26,26,17,8,20,28,24,30,26,31,30,24,24,24,21,32,28,37,27,28,29,31,30,26,27,27,22,29,28,31,26,33,25,28,30,31,26,26,25,25,27,26,19,23,35,22,20,15,19,26,28,28,28,25,22,22,28,23,19,23,25,25,29,20,21,26,27,26,26,17,21,25,23,16,23,28,27,22,18,18,16,10,21,25,27,25,19,14,25,28,24,20,22,25,23,23,19,24,24,20,20,23,26,24,17,13,25,27,21,19,22,24,21,19,20,23,25,20,19,23,25,26,8,18,26,27,21,18,23,25,21,16,20,22,26,29,22,26,26,28,10,12,28,25,18,17,24,25,18,15,22,27,25,19,17,26,25,27,4,20,27,28,52,28,51,27,24,18,13,24,29,23,24,24,18,16,22,24,24,10,21,25,25,25,16,20,20,26,22,22,13,19,24,25,21,14,22,27,25,19,13,22,26,27,19,6,22,46,26,25,53,26,24,22,9,26,23,32,13,20,21,22,28,21,14,18,24,26,24,11,19,28,25,22,12,22,23,23,21,14,20,21,23,20,8,14,15,16,23,21,2,1,18,23,22,5,17,26,24,19,20,25,27,36,37,32,43,39,25,23,19,17,21,24,16,15,17,20,20,21,22,24,22,16,20,26,29,29,16,17,23,24,24,19,21,25,25,26,26,2,26,27,30,48,29,32,44,44,31,29,47,29,23,23,21,20,23,23,20,23,18,11,21,26,32,40,32,30,27,16,18,25,25,28,52,35,32,29,29,47,29,29,48,36,30,24,42,30,26,25,9,20,29,49,32,45,29,30,36,29,25,27,29,54,30,25,20,2,27,27,22,24,37,25,28,21,19,22,10,18,23,25,23,15,14,26,23,28,31,30,9,26,23,25,25,16,12,39,32,26,25,32,26,23,23,26,28,28,26,24,24,23,23,29,26,28,28,25,26,28,26,17,18,30,30,31,30,25,22,22,20,25,39,32,28,30,29,28,30,19,15,33,24,30,46,20,8,28,27,37,35,35,37,27,26,31,1,4,22,18,23,29,29,40,31,35,47,27,29,5,18,32,32,33,38,30,34,38,32,38,37,22,38,20,28,23,1,3,2,1,5,2,2,1,3,2,2,2,3,1,2,10,2,7,8,3,6,2,2,2,3,2,2,6,2,2,7,18,4,2,23,1,3,27,3,1,3,4,2,4,1,2,19};
#else
#define SAMPLE8
// 8 kHz samples
const PROGMEM uint8_t sound_rl[] = {2,2,2,3,2,2,3,3,4,3,3,2,2,1,3,2,2,3,2,2,2,2,3,5,2,3,1,2,2,3,4,3,3,2,2,2,2,2,3,2,2,2,2,2,2,2,3,3,2,2,3,1,2,2,2,3,2,3,3,3,1,2,2,2,2,3,1,3,2,3,3,2,2,2,1,2,2,3,1,2,2,3,2,2,2,3,2,2,2,2,2,1,2,3,2,2,2,3,2,2,2,3,3,3,5,3,3,2,1,3,2,3,2,2,2,3,4,2,2,3,2,3,5,3,3,2,2,2,2,3,2,3,2,3,1,3,2,3,3,2,3,2,3,2,2,3,3,5,2,2,2,2,3,2,1,3,2,2,3,2,5,3,5,3,3,2,2,2,2,2,2,3,3,1,2,2,3,3,1,1,3,5,3,3,1,2,3,2,2,2,2,3,2,3,2,3,3,2,1,2,4,3,5,3,3,2,2,2,2,1,3,3,6,3,4,4,5,4,4,4,5,4,2,2,2,4,3,3,5,4,3,6,3,2,2,2,4,3,3,5,4,3,5,3,3,2,3,3,3,5,4,3,3,1,1,3,4,1,2,3,3,3,1,2,3,3,3,1,2,3,5,4,3,4,5,3,5,4,5,4,3,4,5,3,5,4,6,3,3,4,5,3,6,3,3,2,2,3,3,3,6,3,3,1,1,3,3,2,2,3,3,3,6,3,5,4,2,3,2,3,3,4,4,4,4,4,7,3,3,5,3,5,4,3,2,1,4,3,3,5,4,5,3,4,1,1,4,3,3,5,4,4,4,3,1,2,4,3,3,1,1,3,4,4,5,4,4,3,6,3,4,4,5,4,4,3,5,3,5,4,4,5,3,3,5,3,5,5,3,5,3,2,6,3,4,6,5,3,2,3,1,1,3,5,5,3,5,3,2,2,1,2,3,5,5,5,3,2,2,3,1,1,3,2,1,2,2,1,2,3,1,2,3,1,3,5,3,1,1,2,2,1,3,2,2,1,2,3,2,5,5,3,4,5,3,2,2,2,1,3,5,2,1,1,3,4,3,2,3,4,3,1,1,3,1,1,3,5,2,1,4,4,4,1,1,2,1,1,4,4,1,2,4,4,5,3,1,1,3,2,1,2,1,2,3,5,5,2,1,2,3,1,1,5,3,5,5,2,1,1,3,3,1,1,2,2,3,1,1,3,4,4,4,4,2,1,3,5,3,4,4,4,3,2,3,4,4,4,4,4,3,2,2,5,3,4,5,4,3,2,3,3,4,4,4,6,1,2,5,3,3,4,5,2,1,2,2,2,3,3,3,4,3,5,2,4,4,3,3,4,3,4,2,4,4,3,4,4,3,4,2,3,5,4,3,4,2,5,1,4,4,4,3,4,3,4,2,4,4,3,3,5,3,3,3,4,3,4,4,3,4,4,2,4,3,4,3,4,4,3,3,3,1,1,3,3,4,3,3,4,3,3,2,1,2,3,1,1,3,3,3,5,3,3,1,1,3,2,1,3,1,3,3,2,2,1,2,4,2,1,2,3,1,2,2,3,3,3,1,2,2,3,3,1,2,2,2,3,2,2,3,2,2,2,2,3,2,2,3,2,1,3,3,2,2,3,2,2,2,3,2,2,3,3,2,2,2,3,2,3,2,3,1,2,3,2,3,3,1,2,3,3,1,2,3,4,2,2,3,2,2,3,2,2,3,2,1,2,3,2,2,3,2,2,2,4,1,1,3,2,2,3,2,2,2,3,2,2,2,3,2,2,2,3,2,2,2,3,2,1,3,3,1,2,2,3,2,3,2,2,2,3,3,6,5,3,2,2,3,2,3,2,3,3,2,3,2,2,2,3,2,2,2,3,2,2,3,2,3,3,2,3,2,2,2,3,3,1,3,3,5,3,3,2,2,2,3,2,3,2,3,2,3,2,2,2,3,2,3,2,3,2,2,2,3,3,2,2,3,3,2,1,3,3,2,1,3,3,2,1,3,3,2,1,3,3,2,2,2,3,5,3,2,2,2,4,5,3,3,1,2,4,3,4,3,3,2,3,2,2,3,3,2,1,3,3,3,3,1,4,3,2,3,3,2,2,3,2,3,2,2,3,3,2,2,3,3,2,3,3,2,2,3,3,2,2,3,3,2,2,2,3,3,3,2,3,2,2,3,3,2,2,3,3,3,2,1,3,3,3,2,3,2,2,3,3,2,2,3,3,2,2,3,2,3,3,2,3,2,3,2,3,2,2,3,3,3,2,2,3,2,3,3,2,2,3,2,3,2,2,3,3,3,2,2,3,2,3,3,2,2,3,2,3,2,2,3,3,2,2,3,2,3,3,3,2,2,2,3,3,2,2,3,3,2,2,2,3,3,3,3,2,2,2,3,3,2,2,2,3,3,2,2,3,3,3,2,3,1,3,3,2,2,2,3,3,2,2,3,3,3,2,3,2,2,3,2,3,2,2,3,2,2,2,3,3,3,3,2,2,2,3,3,2,2,2,3,2,2,3,3,2,3,2,3,3,1,3,3,2,2,2,3,3,1,3,3,2,2,3,3,6,3,3,2,3,2,2,2,3,3,2,2,3,2,3,2,3,2,2,3,2,3,2,2,3,3,2,2,2,3,2,3,1,3,2,3,2,1,2,4,5,2,3,2,2,3,2,3,2,2,3,2,3,2,2,2,3,2,3,2,2,5,4,2,3,3,1,3,2,2,1,3,3,3,2,2,2,2,4,2,1,3,1,5,4,2,3,2,1,4,3,1,3,2,3,3,1,3,2,2,2,1,3,3,2,6,3,2,2,2,3,3,2,1,2,2,3,7,2,3,3,1,2,3,2,3,2,1,2,2,3,6,2,3,3,2,2,3,2,3,2,1,2,2,3,7,1,3,3,1,3,2,2,3,2,2,2,2,3,7,1,3,3,1,3,2,2,3,2,1,2,3,3,6,1,3,8,2,1,7,2,2,3,5,2,4,3,1,3,1,2,4,2,1,3,2,3,5,2,3,7,1,3,5,3,2,4,5,2,5,9,7,3,1,5,5,2,4,8,6,2,3,6,4,2,4,4,2,4,8,8,10,5,2,3,4,4,3,4,5,3,3,6,4,2,3,2,2,4,1,3,3,2,2,3,2,3,3,2,1,2,4,5,3,3,1,1,4,2,2,3,2,2,3,1,3,3,3,2,3,2,3,3,2,1,2,3,2,3,2,3,1,3,3,1,2,3,2,1,1,2,1,4,1,1,2,4,1,1,1,1,2,3,2,1,2,4,2,3,1,3,3,2,3,1,2,3,1,2,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1,1,1,1,2,1,1,1,2,1,1,1,1,2,3,2,3,2,2,2,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,2,2,4,1,3,5,3,2,1,1,2,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,2,1,2,1,1,2,1,1,1,2,1,1,1,1,2,1,1,2,1,1,2,1,1,2,3,3,2,1,1,1,2,1,1,1,2,1,2,1,1,1,3,1,2,1,1,1,1,1,1,2,1,2,1,2,1,1,1,2,1,1,1,1,2,4,3,3,3,2,2,2,1,1,2,2,1,1,1,2,2,1,2,1,1,1,2,3,1,4,2,1,2,1,2,1,1,2,1,2,1,1,1,1,1,2,1,4,3,3,1,2,1,1,2,1,1,1,2,1,1,2,3,1,1,1,1,2,1,1,1,1,2,1,1,1,1,2,1,1,1,1,2,1,4,1,4,1,2,1,1,1,2,1,1,2,1,2,1,1,2,3,2,1,1,1,2,1,4,2,3,2,1,2,1,1,1,1,2,1,1,2,1,4,1,2,1,1,1,2,1,1,2,1,4,1,4,1,2,1,1,2,1,1,2,1,2,1,1,2,1,1,1,2,1,1,1,2,1,2,1,1,1,2,2,3,2,3,2,1,1,2,1,1,1,3,3,2,1,1,1,1,2,1,3,3,2,2,3,3,3,1,1,1,2,4,2,3,2,2,2,1,1,2,2,4,2,1,1,2,1,1,4,2,2,3,3,2,3,3,2,3,2,1,1,1,2,2,3,2,2,2,4,2,3,3,2,1,1,2,3,2,2,2,2,1,1,2,3,2,2,3,1,2,1,1,2,3,2,2,2,3,2,2,3,3,3,2,3,1,1,2,2,4,2,2,3,2,2,2,3,2,2,3,2,2,3,2,2,3,3,2,3,2,3,1,2,2,1,2,1,1,2,2,3,2,3,2,2,2,2,3,2,2,2,2,4,2,3,3,2,2,2,3,2,2,3,2,3,2,3,2,2,1,1,1,2,2,3,3,3,3,2,2,1,1,1,2,3,2,3,3,2,1,4,2,1,1,3,3,3,2,5,2,2,3,3,2,3,1,2,2,1,4,2,2,3,3,2,4,8,2,1,7,3,1,4,2,2,4,4,2,2,2,2,4,1,2,7,3,2,4,3,2,3,2,1,4,2,2,4,6,2,3,3,3,2,3,2,3,2,1,5,5,2,3,3,3,2,3,2,3,2,1,6,5,2,3,3,3,2,3,2,3,8,6,2,3,3,3,2,3,2,3,5,1,3,4,2,3,3,3,3,2,2,4,6,2,2,3,2,3,4,3,2,4,2,2,4,2,2,6,2,3,3,3,2,4,3,2,3,3,2,3,4,2,4,3,2,4,3,2,3,3,2,3,4,2,4,3,2,3,3,2,3,4,2,3,4,2,3,4,2,3,3,3,2,4,1,4,3,3,3,3,3,3,3,3,2,8,4,3,3,3,3,3,3,3,3,3,2,3,3,3,3,4,2,3,3,3,3,3,2,3,3,3,3,4,2,3,4,2,3,4,2,2,3,3,3,4,3,2,4,3,2,4,7,3,3,4,2,3,4,3,2,5,5,3,3,4,3,2,5,1,2,8,4,2,4,4,2,3,4,1,3,7,4,3,3,4,2,3,8,8,4,1,4,4,2,3,8,8,3,2,4,3,3,3,10,6,3,1,5,4,2,4,6,1,2,7,8,10,8,9,6,3,2,4,3,2,4,10,7,10,7,11,8,9,8,3,3,3,12,4,2,3,4,2,3,3,2,3,4,2,2,3,1,5,4,1,3,4,2,3,3,1,2,3,3,1,2,3,6,3,3,5,3,2,3,3,1,4,1,2,3,2,3,2,3,3,3,2,3,2,1,7,4,1,3,3,2,3,4,1,6,3,2,3,1,2,2,3,3,5,6,2,1,2,2,4,2,2,2,3,2,2,3,2,3,2,2,2,5,3,4,3,3,2,2,3,3,4,3,3,2,3,2,1,3,4,3,3,4,1,1,2,3,2,2,2,2,2,3,4,4,3,4,1,1,2,3,2,2,2,3,2,2,2,1,1,2,4,2,3,4,1,2,2,3,3,2,1,2,4,2,2,5,3,3,3,2,2,3,3,2,3,2,2,3,2,3,2,3,3,3,2,3,2,3,3,2,3,1,2,3,1,3,2,4,2,2,3,3,4,2,1,1,2,2,2,3,2,2,3,2,2,2,2,2,3,3,3,1,1,3,2,6,3,2,2,3,3,3,3,2,3,3,3,4,2,2,3,3,3,2,2,3,3,3,3,3,3,4,5,3,4,3,3,3,3,3,2,3,3,4,3,3,3,3,3,3,3,2,3,1,1,2,2,4,3,3,3,3,3,3,3,3,4,3,3,4,3,3,3,4,2,4,3,3,3,4,3,2,5,4,2,4,3,2,4,3,1,4,3,2,3,3,3,3,3,3,4,3,4,3,4,3,4,3,4,4,4,4,3,4,5,4,3,2,3,2,5,4,5,5,5,4,3,2,3,4,4,4,2,3,4,4,4,4,2,2,4,4,6,4,4,4,3,4,4,4,4,4,5,3,4,3,5,3,3,4,4,4,4,4,4,3,5,5,3,4,4,3,3,4,4,4,4,4,4,5,4,4,4,4,4,4,5,3,5,4,4,4,5,4,4,4,4,5,4,4,4,4,5,4,4,4,4,4,4,4,4,4,6,4,4,4,4,4,4,3,4,5,7,4,4,4,4,3,4,3,4,5,4,1,3,4,4,3,4,3,3,3,4,3,1,5,6,4,3,4,3,3,3,4,3,3,2,3,3,2,3,4,3,4,3,3,3,3,3,1,3,4,4,3,3,3,3,3,4,2,3,4,7,4,1,4,5,3,3,4,1,2,4,3,8,3,2,5,4,3,4,6,3,5,7,3,3,5,4,3,4,4,2,4,1,4,5,3,4,4,4,4,4,3,3,3,2,4,5,2,4,4,5,3,5,3,3,8,10,8,3,3,4,3,4,6,10,9,3,3,4,4,3,6,2,2,7,7,4,3,4,2,4,10,5,10,4,2,3,3,4,4,4,3,5,4,1,5,4,2,3,3,4,5,2,3,6,5,2,4,6,2,4,1,3,5,2,3,7,11,4,3,5,2,3,2,2,4,4,2,1,3,3,4,2,1,1,3,2,3,4,5,3,2,5,3,3,4,5,3,3,4,2,1,1,2,5,2,3,6,4,2,2,2,3,1,2,5,2,3,3,3,5,2,2,2,3,1,1,3,2,3,2,6,2,3,2,1,3,2,3,2,2,2,2,2,2,2,2,3,1,2,3,2,1,2,3,3,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,3,2,1,3,2,2,2,3,2,2,2,2,2,2,2,2,3,2,2,2,2,3,2,1,3,2,2,3,2,2,2,3,2,2,2,3,2,2,2,2,3,2,1,4,3,5,2,3,1,2,3,2,2,2,2,2,2,5,3,4,3,7,2,2,3,3,1,3,1,3,7,2,3,7,6,1,3,9,7,3,5,4,5,2,3,2,2,3,2,1,3,2,2,5,4,6,3,2,3,1,2,6,3,2,2,2,1,3,3,3,1,2,3,2,3,1,3,2,2,2,3,2,3,5,3,6,3,2,2,2,2,3,2,2,3,2,3,5,3,6,3,2,2,3,2,3,1,2,3,2,3,5,3,2,2,2,3,2,2,3,2,3,2,1,3,3,3,4,3,2,1,3,3,2,2,2,3,2,2,2,3,2,2,2,1,3,3,2,2,2,3,2,3,2,2,3,2,2,2,2,2,2,2,3,2,3,1,3,3,2,2,2,2,3,2,2,2,3,2,2,2,2,3,2,2,2,3,2,2,2,2,3,2,2,3,2,2,2,2,3,2,2,2,3,2,2,3,2,2,3,2,2,2,2,2,3,2,2,3,2,2,3,2,2,3,2,2,3,2,1,3,2,2,3,2,3,2,3,1,3,2,3,2,2,2,3,1,2,3,2,2,2,3,3,3,2,1,3,3,2,2,1,3,6,4,1,2,3,2,3,3,2,2,3,2,2,2,1,3,3,1,3,2,2,3,8,2,2,2,3,2,2,2,1,3,3,1,3,2,2,4,4,1,3,2,2,2,2,2,2,2,2,2,3,1,3,2,2,6,2,2,2,3,2,2,2,2,2,2,2,2,2,2,6,6,2,3,2,2,2,3,2,2,2,2,2,2,2,3,7,6,1,2,2,3,2,2,2,4,3,1,3,2,2,2,1,2,3,2,1,3,1,1,2,2,3,1,2,2,2,2,1,2,3,2,1,3,6,2,1,5,2,2,2,2,2,2,2,3,5,2,1,3,5,2,2,2,5,2,2,2,2,2,3,1,5,4,2,2,3,3,1,2,2,1,5,4,1,2,3,1,6,2,2,3,3,2,2,1,1,5,9,3,2,2,4,2,2,3,2,3,2,1,2,3,2,2,3,2,2,5,5,3,2,2,2,2,3,1,3,2,2,3,2,2,3,2,2,1,1,2,3,2,2,2,3,2,1,2,2,2,3,2,2,1,1,1,2,3,5,4,3,3,3,5,1,2,3,2,3,2,2,2,4,2,3,2,2,3,4,4,3,2,1,2,2,2,1,3,6,3,1,3,2,2,2,1,3,2,5,3,1,2,2,3,2,2,2,3,3,4,6,3,4,2,2,2,3,2,4,5,3,5,4,2,1,1,3,4,3,2,1,1,2,1,2,2,3,1,3,2,3,2,2,2,2,3,4,2,1,2,2,1,1,2,3,2,3,2,2,3,3,2,2,1,4,3,2,1,2,1,2,3,3,3,4,5,3,1,1,3,1,1,2,2,1,1,2,4,3,1,2,1,2,1,3,1,2,1,2,1,1,2,1,2,1,3,2,1,5,2,1,2,1,2,2,1,2,2,1,1,2,2,1,6,1,1,2,1,2,2,1,2,2,2,1,1,2,1,3,1,1,2,1,2,1,2,1,3,1,1,2,1,2,2,1,2,2,2,1,2,1,1,3,1,2,1,2,1,1,6,1,2,5,2,1,2,1,2,1,2,1,2,2,2,1,1,2,1,2,6,1,1,6,1,1,2,2,1,1,2,4,3,1,1,2,1,2,3,1,4,6,4,2,2,1,1,5,2,1,2,1,1,2,8,6,4,1,2,1,2,5,2,1,1,2,1,2,7,2,1,4,4,1,2,1,2,1,1,2,2,2,1,2,1,2,6,8,3,2,4,2,1,2,2,2,1,1,2,1,2,1,4,7,3,2,2,1,2,4,3,1,1,2,1,1,2,1,2,1,2,1,1,5,3,1,2,1,2,2,1,2,2,4,1,2,7,2,1,4,3,1,2,1,2,2,1,2,1,5,2,1,7,7,2,2,2,1,2,2,1,1,2,3,1,2,2,1,2,1,2,2,1,5,2,2,2,1,2,2,1,2,2,2,1,2,8,2,1,6,1,2,2,1,2,2,2,1,2,2,1,2,8,8,2,2,6,5,1,3,1,1,7,1,2,5,2,2,6,6,1,4,10,7,10,7,1,3,11,4,1,1,4,2,5,4,2,5,2,2,5,3,2,2,3,2,6,3,2,6,2,2,5,3,1,7,3,3,1,2,2,3,2,3,8,3,2,3,5,1,1,3,2,2,4,2,4,2,3,3,2,2,2,2,3,2,2,6,3,2,1,1,3,4,2,3,2,2,3,2,2,2,2,2,2,3,2,2,3,2,1,3,2,3,1,2,2,3,4,2,4,3,3,5,3,4,3,2,1,2,5,2,1,1,3,3,2,3,1,1,3,4,2,5,3,3,3,2,1,3,3,5,3,4,3,3,2,2,1,3,1,2,2,3,2,2,3,2,2,2,2,2,3,2,1,2,4,3,2,1,2,3,2,2,6,3,3,2,2,2,2,2,3,1,1,2,1,2,3,2,1,3,2,3,2,3,2,2,2,3,2,2,2,2,3,1,1,3,3,3,2,2,6,2,4,2,2,2,2,2,1,3,2,1,2,4,2,3,2,5,3,2,3,2,2,3,1,3,2,1,2,3,2,2,2,3,1,2,3,3,1,3,2,2,3,2,2,2,3,3,1,3,3,2,2,2,2,3,2,2,3,2,2,3,2,3,3,2,2,3,2,2,3,1,3,3,1,3,3,2,4,2,2,3,1,3,3,1,3,3,1,3,3,2,4,7,2,1,4,1,3,3,1,3,3,2,3,3,1,3,3,2,3,2,2,2,2,3,3,3,3,3,1,3,3,1,3,2,2,3,2,2,4,3,3,2,2,2,3,2,3,2,2,3,2,2,4,3,3,3,1,3,3,2,2,2,2,3,2,2,4,3,3,3,1,3,3,2,2,3,2,2,2,3,5,3,2,3,2,2,3,2,2,3,2,2,3,2,3,4,3,3,1,3,3,2,2,2,3,2,2,3,3,5,2,3,1,3,3,2,2,3,2,3,2,2,3,5,3,6,3,3,2,2,2,3,2,2,4,4,3,6,4,3,1,2,3,3,2,2,3,4,3,6,4,3,1,3,2,3,2,2,3,4,4,6,3,3,2,2,3,2,3,2,2,4,4,6,4,3,2,2,2,4,2,1,3,4,4,6,4,3,2,2,2,4,5,5,3,4,1,2,3,3,3,2,2,3,5,5,4,3,1,1,5,3,3,1,1,4,5,5,4,4,6,3,3,7,4,2,1,3,3,4,6,3,3,3,1,4,3,6,3,4,6,3,3,3,1,3,4,2,2,2,3,4,2,1,4,3,3,2,1,4,3,2,2,2,4,3,7,3,3,1,2,4,7,3,3,4,7,3,3,2,2,3,3,2,2,2,4,3,3,1,3,3,3,4,2,2,4,3,5,3,3,3,3,2,3,2,3,3,3,2,6,3,2,3,1,3,4,3,3,3,1,2,4,2,3,2,2,4,1,2,4,3,3,6,4,3,6,4,2,2,4,2,3,7,4,3,4,5,3,2,3,2,4,2,1,4,2,5,4,6,2,3,3,2,3,2,1,4,2,2,2,2,3,4,2,5,4,2,3,1,1,4,2,2,3,2,3,7,1,3,3,2,3,7,2,2,3,2,3,6,2,3,3,2,3,6,3,2,3,2,3,4,1,1,2,3,4,2,2,2,1,4,3,1,3,2,3,4,1,1,2,3,4,2,2,7,8,2,2,4,5,3,3,3,2,7,3,1,3,2,4,3,1,2,1,4,3,3,2,7,2,2,3,2,3,3,2,2,2,3,3,2,3,7,3,1,3,3,2,4,2,2,2,2,4,2,3,7,7,2,4,2,3,3,2,2,3,2,4,4,3,1,1,1,3,2,3,3,3,3,3,2,1,3,3,5,4,2,3,3,3,3,3,3,3,3,3,4,2,3,7,3,3,3,4,3,3,3,3,3,4,3,4,3,3,4,4,3,3,3,3,4,3,4,3,3,3,4,4,3,4,3,3,4,4,3,3,3,3,4,4,4,3,4,3,3,4,3,2,3,4,3,5,3,4,4,7,3,4,3,4,4,4,4,4,6,4,4,4,3,4,4,5,4,4,5,4,4,4,4,4,4,4,5,5,4,4,4,4,4,3,5,4,6,4,5,5,4,2,3,4,5,6,5,4,5,6,2,2,3,4,5,8,4,4,5,6,1,2,3,5,5,7,5,3,5,6,7,4,4,4,3,4,3,3,4,9,1,1,3,3,4,4,3,4,3,4,6,7,2,1,2,4,3,4,4,4,3,3,4,2,2,1,1,4,2,1,3,3,4,4,3,5,2,3,4,2,2,7,1,2,3,3,4,4,4,4,3,2,4,1,3,7,1,2,2,4,3,5,3,5,3,3,8,3,4,2,3,3,4,4,4,4,3,3,7,4,4,3,2,4,3,4,4,4,4,3,6,4,2,5,3,3,3,4,4,4,4,3,6,4,3,2,1,2,3,3,3,4,4,4,4,3,6,4,3,5,3,4,3,4,3,5,3,3,5,6,2,3,2,1,3,3,3,4,4,4,3,4,5,5,3,3,6,3,3,4,4,4,4,3,5,5,3,3,2,1,3,3,3,4,4,3,4,3,3,3,3,4,3,5,3,4,3,4,4,3,4,3,3,3,4,4,3,4,3,4,3,4,4,3,3,3,3,4,2,3,4,3,3,1,3,3,4,3,4,3,2,3,4,3,2,3,3,3,4,2,3,3,3,4,3,2,3,3,3,2,3,3,3,3,2,3,2,1,3,3,3,3,3,1,3,4,3,2,3,3,3,3,2,3,3,3,2,3,4,3,2,1,3,4,2,3,3,3,2,2,3,3,3,3,2,3,3,3,1,2,4,3,3,2,3,3,3,1,3,3,3,4,2,4,3,4,1,1,4,3,2,2,3,3,3,1,3,3,4,2,2,3,4,6,3,4,6,4,6,4,3,2,2,3,3,3,3,3,2,2,3,3,3,1,3,3,3,3,2,3,2,3,3,3,2,2,3,3,3,1,3,4,3,2,2,2,4,3,6,6,3,3,7,3,3,3,1,3,3,4,2,2,3,3,3,3,1,2,3,4,3,1,3,3,3,3,1,3,3,3,2,2,3,2,3,3,1,1,2,2,3,3,3,2,6,3,3,3,2,3,4,4,5,4,5,5,3,3,2,2,3,3,2,2,2,2,3,3,2,3,3,2,3,3,4,3,2,2,3,3,3,3,2,3,3,4,6,4,4,6,3,4,6,5,4,4,5,4,3,3,3,2,3,3,2,3,3,1,2,4,4,5,4,3,4,2,2,3,3,4,6,5,4,3,4,6,3,4,6,5,3,3,6,3,4,3,1,2,4,6,4,6,3,4,5,3,3,4,3,7,4,3,6,3,3,3,5,3,3,3,3,2,1,3,3,3,3,2,1,3,3,4,4,8,3,3,3,2,1,5,4,3,4,4,3,3,3,3,3,4,3,3,3,3,3,4,3,3,4,3,3,4,3,2,2,4,4,4,3,4,2,3,3,3,5,3,4,4,3,4,4,2,2,4,3,4,6,2,1,3,4,5,4,4,5,3,4,4,3,2,3,3,4,5,4,4,6,4,6,4,4,4,5,4,4,5,4,5,4,3,5,2,4,3,3,3,3,2,1,2,4,4};
#endif

#define RING_BACK_TIME (25000)
#define RING_BACK_DELAY (3000)

int pin_LED = 13;

int pin_SHK = 5; // swich hook
int pin_FR = 3; // forward/reverse
int pin_RM = 4; // ringing mode
int pin_AudioOut = 11;

bool dial_tone = false;

#define F_tone_Hz (425)  // Frequenz fuer normale Zeichen
#define F_hinweis1_Hz (950)
#define F_hinweis2_Hz (1400)
#define F_hinweis3_Hz (1800)
#define HALF_PERIOD_RING_MS (20) // 25 Hz = 40 ms, i.e. half period is 20 ms

// 6.2.3.5 Das Telefon muss fuer mindestens 250 ms auflegen. Ansonsten kann das Netz durcheinander kommen.
// 6.1.13 in USS-Routine ist der Anschluss vermitlungstechnisch "abgeschaltet", d.h. das einzige Signal, das erkannt wird, ist Hoerer Auflegen.
//        Der Gassenbesetztton (GBsTon) wird fuer 60 s <= t <= 300 s gesendet, danach wird Strom zum Telefon auf Ruheniveau reduziert (1.8 mA oder 0).
//        Nachdem der GBsTon gesended wurde, muss der Hoerer fuer mindestens 2 s aufgelegt werden, um Normalzustand zu erreichen (Ruhezustand).

// 6.2.2.2 nach abheben des Hoerers hat das Telefon 120 ms Zeit, einzuschwingen, d.h. wir sollten SHK-Kontrolle fuer 120 ms unterbinden
// 6.2.3.4.1 Waehlzeichen koennen erst nach 200 ms nach Anliegen des Waehltones gegeben werden.
// 6.2.3.4.2 nach 60 s Waehlzeichen wird USS eingeleitet --> Gassenbesetztton

// 6.2.4.3 Der Waehlton wird vor Ende des ersten Waehlzeichens abgeschaltet
// 6.2.4.4 Waehlpause >4s fuehren zur USS-Routine

// 6.2.5 Kommunikationszustand ended mit Ruhezustand oder USS, je nachdem, welche Partei auflegt.

// 6.2.5.3 Gabelschaltsignale (Hook-Flash) (140-)170 ms < t < 310(-370) ms
// 6.2.6.2 Wenn keine Gabelschaltungsberechtgung vorliegt, dann wird Verbindungsabbau nach >85 ms auflegen erkannt

// 6.2.7.1 Anrufzustand am Ziel ist der Ruhezustand, Zentrale sendet Rufsignal (Wecker klingelt)
// 6.2.7.9 Netzt geht in USS-Routine wenn Anrufzustand > 60 s

// 6.2.8.3 Kommunikationszustand beginnttyp 250 ms nach dem Abheben des Hoerers.
// 6.2.8.5 Das Rufsignal wird innerhalb von 230 ms nach dem Abnehmen eingestellt. (Note: Modem has tighter requirements than that.)

// 7.2.2.2 Impuls = unterbrechung der Gleichstromschleife (d.h. auflegen), Pause = quasi Hoerer abgenommen.
// 7.2.2.4 Impulsdauer 52 ms < t < 71 ms, Pausen-dauer 32 ms < t < 46 ms, Gesamtlaenge 90 ms < t+t < 110 ms
//         Prellzeit < 3 ms
// 7.2.3 Zwischenwahlzeit, d.h. Zeit zwischen Ziffern is >= 680 ms. (Nach 4s Uebergang zur USS-Routine).

// 8.8 Der Hinweiston is leiser als die normalen Signaltoene

volatile unsigned long clk_previous_SHK_low_ms = 0; // length of last LOW signal (valid if we're currently HIGH)
volatile unsigned long clk_previous_SHK_high_ms = 0; // length of last HIGH signal (valid if we're currently LOW)
volatile unsigned long clk_current_SHK_low_ms = 0; 
volatile unsigned long clk_current_SHK_high_ms = 0;
volatile byte clk_SHK_status = 0; // 0: low, 1: high, 2: low -> high, 3: high -> low
volatile unsigned long clk_custom_counter = 0;
volatile unsigned long clk_dial_counter = 0;

enum class Zustand {
  RuheZ, WahlZ, AnrufZ, KommunikationsZ, USS
};

enum class Signal {
  Aus, Waehlton, Freiton, Besetztton, Gassenbesetztton, Hinweiston_KeinAnschluss, Rufsignal
  // nicht implementiert: 8.2 Sonderwaehlton wenn System Steuerzeichen ueber die Wahlscheibe erwartet -- initiiert durch Hook Flash
};

volatile uint16_t rl_next_run = 0;
volatile int8_t rl_counter = 0;
volatile byte rl_play_sound = 0;

void play_delta_rl() {
  if (rl_counter <= 0) {
    rl_counter = pgm_read_byte_near(sound_rl + rl_next_run);
    digitalWrite(pin_AudioOut, !digitalRead(pin_AudioOut));
    rl_next_run ++;
    if (rl_next_run == sizeof(sound_rl)) {
      rl_next_run = 0;
      rl_play_sound = 0;
    }
  }
  rl_counter --;  
}

Signal sig_status = Signal::Aus;
volatile int sig_state; // meaning depends on signal
volatile int sig_counter; // meaning depends on signal and sig_state
volatile int sig_counter2; // meaning depends on signal and sig_state

void init_signal(Signal sig) {
  rl_play_sound = 0; // stop playing whatever sampled sound we play
  if (Signal::Aus == sig) {    
    sig_status = Signal::Aus;
    digitalWrite(pin_FR, HIGH);
    digitalWrite(pin_RM, LOW);
    noTone(pin_AudioOut);
  } else
  if (Signal::Waehlton == sig) {
    sig_status = Signal::Aus;
    digitalWrite(pin_FR, HIGH);
    digitalWrite(pin_RM, LOW);
    tone(pin_AudioOut, F_tone_Hz);
    sig_status = Signal::Waehlton;    
  }
  if (Signal::Rufsignal == sig) {
    sig_status = Signal::Aus;
    noTone(pin_AudioOut);
    sig_state = 1; // 500 ms Klingel
    sig_counter = 500;
    sig_counter2 = HALF_PERIOD_RING_MS;
    digitalWrite(pin_RM, HIGH);
    digitalWrite(pin_FR, LOW);
    sig_status = Signal::Rufsignal;
  }
  if (Signal::Freiton == sig) { // Verbindung ist aufgebaut
    sig_status = Signal::Aus;
    digitalWrite(pin_FR, HIGH);
    digitalWrite(pin_RM, LOW);
    
    tone(pin_AudioOut, F_tone_Hz);    
    sig_state = 1;
    sig_counter = 500; // 450 to 1100 ms    
    sig_status = Signal::Freiton;
  }
  if (Signal::Besetztton == sig) {
    sig_status = Signal::Aus;
    digitalWrite(pin_FR, HIGH);
    digitalWrite(pin_RM, LOW);
    
    tone(pin_AudioOut, F_tone_Hz);    
    sig_state = 1;
    sig_counter = 480; // 480 ms +-10%
    sig_status = Signal::Besetztton;
  }
  if (Signal::Gassenbesetztton == sig) {
    sig_status = Signal::Aus;
    digitalWrite(pin_FR, HIGH);
    digitalWrite(pin_RM, LOW);
    
    tone(pin_AudioOut, F_tone_Hz);    
    sig_state = 1;
    sig_counter = 240; // 240 ms +-10%
    sig_status = Signal::Gassenbesetztton;
  }
  if (Signal::Hinweiston_KeinAnschluss == sig) {    
    sig_status = Signal::Aus;
    digitalWrite(pin_FR, HIGH);
    digitalWrite(pin_RM, LOW);
    
    tone(pin_AudioOut, F_hinweis1_Hz);
    sig_state = 1;
    sig_counter = 330; // 330 ms +-10%
    sig_status = Signal::Hinweiston_KeinAnschluss;
  }
}

void process_signal(Signal sig, char dt) {
  // this fcn is called in 1ms intervals
  if (Signal::Aus == sig) {
    return;    
  } else
  if (Signal::Waehlton == sig) {
    return;
  } else
  if (Signal::Rufsignal == sig) {
    sig_counter -= dt;
    sig_counter2 -= dt;
    if (sig_counter > 0) {
      // let the bell ring
      if (sig_counter2 <= 0) {
        digitalWrite(pin_FR, !digitalRead(pin_FR));
        sig_counter2 = HALF_PERIOD_RING_MS;
      }
    } else {
      if (1 == sig_state) {
        digitalWrite(pin_FR, HIGH);
        digitalWrite(pin_RM, LOW);
        sig_counter = 1000; // anything from 0 to 5000 ms break
        sig_counter2 = 2*sig_counter; // disable ringing pulses
        sig_state = 2;
      } else
      if (2 == sig_state) {
        digitalWrite(pin_RM, HIGH);
        digitalWrite(pin_FR, LOW);
        sig_counter = 1000; // always 1000 ms ring
        sig_counter2 = HALF_PERIOD_RING_MS;
        sig_state = 3;
      } else
      if (3 == sig_state) {
        digitalWrite(pin_FR, HIGH);
        digitalWrite(pin_RM, LOW);
        sig_counter = 5000; // always 5000 ms break
        sig_counter2 = 2*sig_counter; // disable ringing pulses
        sig_state = 2;
      }
    }
  } else
  if (Signal::Freiton == sig) {
    sig_counter -= dt;
    if (sig_counter <= 0) {
      if (1 == sig_state) {
        noTone(pin_AudioOut);
        sig_counter = 1000; // 0 to 4400 ms
        sig_state = 2;        
      } else
      if (2 == sig_state) {
        tone(pin_AudioOut, F_tone_Hz);
        sig_counter = 1000; // 1000 ms +-100 ms
        sig_state = 3;
      } else
      if (3 == sig_state) {
        noTone(pin_AudioOut);
        sig_counter = 4000; // 4000 +- 400 ms
        sig_state = 2;
      }
    } // else do nothing
  }
  if (Signal::Besetztton == sig) {
    sig_counter -= dt;
    if (sig_counter <= 0) {
      if (1 == sig_state) {
        noTone(pin_AudioOut);
        sig_counter = 480; // 480 +- 48 ms
        sig_state = 2;
      } else      
      if (2 == sig_state) {
        tone(pin_AudioOut, F_tone_Hz);
        sig_counter = 480; // 480 +- 48 ms
        sig_state = 1;
      }
    }
  }
  if (Signal::Gassenbesetztton == sig) {
    sig_counter -= dt;
    if (sig_counter <= 0) {
      if (1 == sig_state) {
        noTone(pin_AudioOut);
        sig_counter = 240; // 240 +- 24 ms
        sig_state = 2;
      } else      
      if (2 == sig_state) {
        tone(pin_AudioOut, F_tone_Hz);
        sig_counter = 240; // 240 +- 24 ms
        sig_state = 1;
      }
    }    
  }
  if (Signal::Hinweiston_KeinAnschluss == sig) {
    sig_counter -= dt;
    if (sig_counter <= 0) {
      if (1 == sig_state) {
        tone(pin_AudioOut, F_hinweis2_Hz);
        sig_counter = 330; // 330 ms +- 10%
        sig_state = 2;
      } else
      if (2 == sig_state) {
        tone(pin_AudioOut, F_hinweis3_Hz);
        sig_counter = 330; // 330 ms +- 10%
        sig_state = 3;
      } else
      if (3 == sig_state) {
        // kein Anschluss text -- oder Pause
        noTone(pin_AudioOut);
        rl_next_run = 0;
        rl_counter = 0;
        rl_play_sound = 1;
        sig_counter = 1;
        sig_state = 4;
      } else
      if (4 == sig_state) {        
        if (0 == rl_play_sound)
          sig_state = 5;
        else          
          sig_counter = 1;        
      } else
      if (5 == sig_state) {
        tone(pin_AudioOut, F_hinweis1_Hz);
        sig_counter = 330; // 330 ms +- 10%
        sig_state = 1;
      }
    }    
  }
}


ISR(TIMER1_COMPA_vect) {
  static int sub_ms = 0;
  static unsigned long clk_1ms = 0; // 32 bit counter roll-over every 49 days -- we could reset this on a successful SHK level change
  static byte debounce_counter = 0; // counts down from to 10, only
  static unsigned long last_low_start = 0; // clock value when we last started clk_SHK_status == 0
  static unsigned long last_high_start = 0; // clock value when we last started clk_SHK_status == 1

  
  sub_ms += 1;
  if (rl_play_sound) play_delta_rl();
  #ifdef SAMPLE64
  if (sub_ms < 64) return;
  #else
  if (sub_ms < 8) return;
  #endif
  sub_ms = 0;
  

#define DT (1)
  clk_custom_counter += DT;
  clk_dial_counter += DT;
  
  clk_1ms += DT;  
  
  bool SHK_high = (HIGH == digitalRead(pin_SHK));
  bool SHK_low = !SHK_high;

  if (SHK_low && (0 == clk_SHK_status)) { // low
    clk_current_SHK_low_ms = clk_1ms - last_low_start;
  } else
  if (SHK_high && (1 == clk_SHK_status)) { // high
    clk_current_SHK_high_ms = clk_1ms - last_high_start;
  } else
  if (SHK_high && (0 == clk_SHK_status)) { // was: low
    // initiate debounce
    clk_SHK_status = 2; // low->high?
    debounce_counter = 10;
    clk_current_SHK_low_ms = clk_1ms - last_low_start;
  } else
  if (2 == clk_SHK_status) { // was: low->high transition
    clk_current_SHK_low_ms = clk_1ms - last_low_start;
    debounce_counter -= 1;
    if (0 == debounce_counter) {
      if (SHK_high) {
        clk_SHK_status = 1; // successful transition from low to high
        last_high_start = clk_1ms;
        clk_previous_SHK_low_ms = clk_1ms - last_low_start;
        clk_current_SHK_high_ms = 0;
      } else
        clk_SHK_status = 0; // no transition from low to high, staying at low
    } // else: do nothing else
  } else
  if (SHK_low && (1 == clk_SHK_status)) { // was: high, now maybe low
    clk_current_SHK_high_ms = clk_1ms - last_high_start;
    clk_SHK_status = 3; // high->low?
    debounce_counter = 10;
  } else
  if (clk_SHK_status == 3) { // was: high->low transition
    clk_current_SHK_high_ms = clk_1ms - last_high_start;
    debounce_counter -= 1;
    if (debounce_counter == 0) {
      if (SHK_low) {
        clk_SHK_status = 0; // transition from low to high
        last_low_start = clk_1ms;
        clk_previous_SHK_high_ms = clk_1ms - last_high_start;
        clk_current_SHK_low_ms = 0;
      } else
        clk_SHK_status = 1; // no transition from high to low, staying high      
    } // else: do nothing else
  }

  process_signal(sig_status, DT);
  
}

void init_timer1() {  
  // 16 bit write: high->low --> can simply assign an unsigned int to register in C
  // 16 bit read: low->high

  // we assume here that the global system prescaler is set to 1.
  
  // disable IRQ
  byte sreg = SREG;
  cli();  
  // clear power reduction bit to 0 to enable Timer1
  PRR &= (0xff ^ _BV(PRTIM1));
    
  // disconnect timer form port
  TCCR1A &= 0x0f;

  // CTC: clear timer on compare match: (WGM1[0:3] = 0x04)
  // counter set to 0x0000 when TCNT1 matches OCR1A
  // set to CTC mode on OCR1A, TOV1 flag set on MAX
  TCCR1A &= (0xff ^ _BV(WGM10) ^ _BV(WGM11));
  // same as TCCR1A &= 0x0c;
  
  TCCR1B &= (0xff - _BV(WGM13));
  TCCR1B |= _BV(WGM12);

  // clock select: 
  TCCR1B &= (0xff ^ _BV(CS10) ^ _BV(CS11) ^ _BV(CS12)); // remove clock source to stop timer
  {
    // set current timer value
    TCNT1 = 0x0000;
  }  
  // prescaler of clk_IO 1:1, 2:8, 3:64, 4:256, 5:1024
  #ifdef SAMPLE64
  TCCR1B |= _BV(CS10); // divide by 1 for 64 kHz
  #else
  TCCR1B |= _BV(CS11); // divide by 8 for 8 kHz
  #endif
      
  // set TOP value to count to, counter is reset to 0 once we reach this value
  // OCR1A = (16,000,000 / prescaler) / output_frequency
  // output frequency = 1000 Hz (1 ms) --> 250 (0xFA) for prescaler==64
  OCR1A = 0x00fa;
  
  // enable interrupt on output compare, i.e. OCFIA flag
  TIMSK1 &= (0xff ^ _BV(ICIE1) ^ _BV(OCIE1B) ^ _BV(TOIE1));
  TIMSK1 |= _BV(OCIE1A);

  // generate interrupt on OCF1A flag set --> clear flag
  TIFR1 &= 0xff ^ _BV(OCF1A);

  // restore IRQ state to what it was when we entered the routine
  SREG = sreg;
}

// NOTE: THESE ARE COPIED INTO MEMORY. TODO: KEEP IN FLASH
// known numbers should be stored in trees, so we can emit an error as soon as we dial a digit that is not a child.
const char own_number[] = "45"; // always busy
const char callback_number[] = "0"; // busy, then ringing back
const char *known_numbers[]={"14","22","23","303","42","6",NULL}; // will be either busy or indicate ringing (randomly chosen)
const char *dead_leaves[]={"10","11","12","13","15","16","17","18","19",
                           "31","32","33","34","35","36","37","38","39",
                           "40","41","43","44","46","47","48","49",
                           "20","21","24","25","26","27","28","29",
                           "5","7","8","9",NULL}; // will be 'kein Anschluss unter dieser Nummer'

unsigned int max_strlen(const char **db) {
  unsigned int maxi = 0;
  unsigned int i = 0;
  while (db[i]) {  
    if (strlen(db[i]) > maxi)
      maxi = strlen(db[i]);
    i ++;
  }
  return maxi;
}

bool number_contained(const char **db, char *number) {  
  int i = 0;
  while (db[i]) {  
    if (0 == strcmp(number, db[i])) return true;
    i ++;
  }
  return false;
}

void setup() {    
  rl_next_run = 0;
  rl_counter = 0;
  rl_play_sound = 0;  
  pinMode(pin_AudioOut, OUTPUT);
  //init_timer1();
  //sei();
  //return;
  pinMode(pin_SHK, INPUT);
  pinMode(pin_LED, OUTPUT);
  digitalWrite(pin_FR, HIGH);
  digitalWrite(pin_RM, LOW);
  pinMode(pin_FR, OUTPUT);
  pinMode(pin_RM, OUTPUT);
  noTone(pin_AudioOut);
  clk_custom_counter = 0;
  clk_dial_counter = 0;
  init_timer1();
  sei();
  
  Serial.begin(115200);
}

void init_signal_if_new(Signal sig) {
  if (sig != sig_status) {
    init_signal(Signal::Aus);    
    init_signal(sig);
  }
}

void loop() {  

// bool SHK_high = (HIGH == digitalRead(pin_SHK));
// Anlegen eines Gleichstromkreises an den Adern a und b des NTA mit so niedrigem Widerstand, dass der AnWAs belegt wird: Schleife schließen (Schleifenschluss).
// > 1 MOhm: Gleichstromkreis der Endeinrichtung offen
// Ruhezustand: Gleichstromschleife ist offen
// Der Impuls ist eine Unterbrechung der Gleichstromschleife (SHK=HIGH), die Pause ist eine Schließung der Gleichstromschleife (SHK=LOW).

// 7.2.2.2 Impuls = unterbrechung der Gleichstromschleife (d.h. auflegen) LOW, Pause = quasi Hoerer abgenommen HIGH.
// 7.2.2.4 Impulsdauer 52 ms < t < 71 ms, Pausen-dauer 32 ms < t < 46 ms, Gesamtlaenge 90 ms < t+t < 110 ms

// BT Standard BT SIN 351, Section 4.2: loop disconnect signalling: digits at a rate of 100 ms+-10 ms, break period is 67 ms+-5, inter-digit pause between 240 and 920 ms, break pulse > 15 ms, make pulse > 5 ms

// Make/Break Ratio for Pulse Dialing:
// AT&P0 - North America: Selects 39%-61% make/break ratio at 10 pulses per second
// AT&P1 - Europe: Selects 33%-67% make/break ratio at 10 pulses per second

// SKy analogue network interface:
// The break period has to be in the range20 ms < t < 103 ms and the make period has to be in the range 20 ms < t < 200 ms. 
//  The inter-digit timeout is 240 ms. The maximum dialing pulse rate is 10 +-1

// Australian standard AS/CA S002:2010, Section 5.5.1.8 Decadic Signalling
//  Break pulse: line current <2.8 mA  -- 60 to 70 ms
//  Make pulse: line current >12 mA -- 30 to 40 ms
//  signal bounce 0.5 ms
//  Inter-digit period separating pulse trains shall be 750 ms to 3 s, with 800 ms recommended.

// AT&T: 8 to 11 dial pulses per second (pg 112/3)
// pg 22: Break: pulse contacts are open, Make: pulse contacts are closed
//  percent-break: break vs total Nominally 61%, 58-64%
// AT&T notes on distnace dialling, 1968
// (72) percent-break Nominally 61%, 58-64%   (older phones: 59.5-67%)
// (73) Bell accepts 300 ms inter-digit separation but produces at least 500 ms, with 600 ms typ minimum.

  const int dial_number_length_max = 15+3; // 15 for the number, 3 for external access
  const int dial_break_length_min = 20; // We use lenient 20 ms to work with absolutely any phone.
  const int dial_break_length_max = 90; // The max specified is 72 ms, so we'll stay above that.
  const int dial_pulse_length_min = 90; // pulse == break + make. 11 pulses per second are within specs (i.e., 90ms), so use a little less.
  const int dial_pulse_train_separation_min = 250; // inter-digit period is typically 800 ms, but at least 200-300 ms due to dial rotation alone
  const int dial_timeout = 4100; // ms (4 s in German standard)
  const int hangup_detect_length_min = 310; // this value is actually 2000 ms after USS routine but we use the normal period in that case also
  const int pickup_detect_length_min = 200; // at least 120 ms due to debounce due to voltage/current adjustment in the phone
  const int32_t pickup_timeout = 61000; // inactivity, calling, busy signal, ...  
  const int32_t USS_timeout = 300000; // after 5 minutes, shut-off the line. Note that this includes the time after which the USS started.
  
  static char dialled_number[dial_number_length_max+2]; // intl phone number plus local dialling convention plus 1 digit to detect excessive length plus 1 for \0
  static int state = -1;
  static int digit;
  static bool pulse_processed;
  static int32_t ring_back_ms = 0;

  if (0) {
    // to check timing
    Serial.print(clk_current_SHK_high_ms); // abgehoben
    Serial.write(' ');
    Serial.print(clk_previous_SHK_high_ms);
    Serial.write(' ');    
    Serial.print(clk_previous_SHK_low_ms);
    Serial.write(' ');
    Serial.println(clk_current_SHK_low_ms); // aufgelegt    
  }

  if (-1 == state) {
    // first run, only
    init_signal_if_new(Signal::Aus);
    state = 0;
    clk_custom_counter = 0;
    *dialled_number = 0;
    digit = -1;
    pulse_processed = true;
    Serial.println("Welcome");
    Serial.print("Phone numbers: ");
    Serial.print(own_number);
    Serial.print(", ");
    int i;
    while (known_numbers[i]) {
      Serial.print(known_numbers[i]);
      if (known_numbers[i+1])
        Serial.print(", ");
      i++;
    }
    Serial.println(".");
    Serial.print("Callback number: ");
    Serial.print(callback_number);
    Serial.println(".");
  }  

  // read clk_SHK_status only one per loop
  // so the following block uses a consistent state
  // note that clk_current_SHK_high_ms and clk_previous_SHK_high_ms are defined in a way that a
  //   single state change won't matter. And there won't be more than one per loop since we have 10 ms debounce.

  // we use for dialling these:
  bool SHK_high = (1 == (clk_SHK_status & 1));  // Kreis geschlossen, d.h. Pause
  bool SHK_low = !SHK_high;   // Kreis offen, d.h. Impuls
  // and otherwise those:
  bool on_hook = !SHK_high;
  bool off_hook = SHK_high;
  
  if (on_hook && (clk_current_SHK_low_ms >= hangup_detect_length_min) && (0 != state) && (8 != state)) {
    // user hung up
    if (state == 2) Serial.println();
    Serial.println("Hang Up");
    init_signal_if_new(Signal::Aus);
    state = 0;    
    //clk_custom_counter = 0;    
  }

  if (on_hook && (0 == state) && (clk_current_SHK_low_ms > RING_BACK_DELAY) && (ring_back_ms > 0)) {
    if (state == 2) Serial.println();
    Serial.println("Ringing");
    init_signal_if_new(Signal::Rufsignal);
    state = 8;    
  }

  if (on_hook && (8 == state) && (clk_current_SHK_low_ms > RING_BACK_DELAY+ ring_back_ms)) {
    if (state == 2) Serial.println();
    Serial.println("Stop Ringing");
    init_signal_if_new(Signal::Aus);
    ring_back_ms = 0;
    state = 0;
  }

  if (off_hook && (clk_current_SHK_high_ms >= pickup_detect_length_min) && ((0 == state) || (8 == state))) {
    if (state == 2) Serial.println();    
    Serial.println("Pick Up");
    if (state == 8) {
      Serial.println("Interrupt Ringing");
      ring_back_ms = 0;
    }
    // user picks up the phone
    init_signal_if_new(Signal::Waehlton);
    state = 1;
    *dialled_number = 0;
    // no valid digit
    digit = -1;
    // wait for a new pulse -- makes sure we're not double-counting pulses, regardless of timeout setting for pulse train
    pulse_processed = true;
  }

  if (SHK_low && (clk_current_SHK_low_ms >= dial_break_length_min) && pulse_processed && ((1 == state) || (2 == state))) {
    // a pulse that may be a dial pulse
    pulse_processed = false;
  }

  if (SHK_high && !pulse_processed && (clk_previous_SHK_low_ms > dial_break_length_max)) {
    // previous pulse was too long, i.e. it was not a dialling pulse after all.
    pulse_processed = true; // --> we ignore that pulse for dialling purposes.
  }
  
  if (SHK_high && (clk_previous_SHK_low_ms >= dial_break_length_min) && (clk_previous_SHK_low_ms <= dial_break_length_max)
      && (clk_previous_SHK_low_ms + clk_current_SHK_high_ms >= dial_pulse_length_min) && !pulse_processed && ((state == 1) || (state == 2))) {        
        // received dial pulse
        if (state == 1) {
          if (state == 2) Serial.println();
          Serial.print("Dialling: ");
          init_signal_if_new(Signal::Aus);
          state = 2;
        }
        if (digit == -1)
          digit = 1;
        else       
          digit ++;
        pulse_processed = true;
      }
    
  if (SHK_high && (clk_current_SHK_high_ms >= dial_pulse_train_separation_min) && (digit != -1) && (2 == state)) {
    // note that pulse_processed is always TRUE at this point since the previous 2 blocks would have caught the pulse
    // pulse train is done
    if ((digit >= 1) && (digit <= 10)) {
      const int old_term = strlen(dialled_number);
      dialled_number[old_term+1] = 0; // new string terminator
      dialled_number[old_term] = '0' + (digit % 10);
      
      Serial.print(digit % 10);
    } else {
      if (state == 2) Serial.println();
      Serial.println("Error, pulse count: ");
      Serial.println(digit);
    }
    digit = -1;
    // wait for a new pulse -- makes sure we're not double-counting pulses, regardless of timeout setting for pulse train

    // just added a digit, test immediately if number is too long and enter USS-Routine if it is
    if ((2 == state) && (strlen(dialled_number) > dial_number_length_max)) {
      // Note: it would be sufficient to test this only after digits are added
      if (state == 2) Serial.println();
      Serial.println("Unnoetiger Schleifenschluss");
      state = 3;
      init_signal_if_new(Signal::Gassenbesetztton);
    }
    if (off_hook && (state == 2) && (0 == strcmp(callback_number, dialled_number))) {
      if (state == 2) Serial.println();        
      Serial.println("Dialled Callback Number");
      ring_back_ms = RING_BACK_TIME;
      state = 5;
      init_signal_if_new(Signal::Besetztton);      
    }
    if (off_hook && (state == 2) && (0 == strcmp(own_number, dialled_number))) {
      if (state == 2) Serial.println();        
        Serial.print("Line busy at ");
        Serial.print(dialled_number);
        Serial.println(" (own number)");
                
        state = 5;
        init_signal_if_new(Signal::Besetztton);
    }
    
    if (off_hook && (state == 2) && number_contained(known_numbers, dialled_number)) {
      // successfully dialled a known number. Choose randomly between line busy and ringing.
      long rnd = random(3);
      if (rnd == 0) {
        if (state == 2) Serial.println();
        Serial.print("Line busy at ");
        Serial.println(dialled_number);
        
        state = 5;
        init_signal_if_new(Signal::Besetztton);
      } else {
        if (state == 2) Serial.println();
        Serial.print("Connected to ");
        Serial.print(dialled_number);
        Serial.println(", waiting for party to pick up.");
        
        state = 4;
        init_signal_if_new(Signal::Freiton);
      }      
    }
  
  if (off_hook && (state == 2) && 
      ((strlen(dialled_number)>=max_strlen(known_numbers)) || (number_contained(dead_leaves, dialled_number)))) {
    // known dead leaves or long number not caught otherwise
    if (state == 2) Serial.println();
    Serial.print("Kein Anschluss unter dieser Nummer: ");
    Serial.println(dialled_number);

    state = 6;
    init_signal_if_new(Signal::Hinweiston_KeinAnschluss);
    }
  }
  
  if (off_hook && (clk_current_SHK_high_ms >= dial_timeout) && (2 == state)) {    
    if (state == 2) Serial.println();
    Serial.println("Unnoetiger Schleifenschluss");
    // USS
    state = 3;
    init_signal_if_new(Signal::Gassenbesetztton);
  }

  if (off_hook && (clk_current_SHK_high_ms > pickup_timeout) && 
      ((1 == state) || (4 == state) || (5 == state) || (6 == state))) {
    if (state == 2) Serial.println();
    Serial.println("Unnoetiger Schleifenschluss");
    // USS
    state = 3;
    init_signal_if_new(Signal::Gassenbesetztton);
  }

  if (off_hook && (clk_current_SHK_high_ms > USS_timeout) && (3 == state)) {
    if (state == 2) Serial.println();
    Serial.println("Shutting Off Line");
    init_signal_if_new(Signal::Aus);
    state = 7;
  }

}
